name: Microservice2 GCP CI Pipeline

on:
  push:
    branches:
      - main
    paths:
      - '**.js'
      - '.github/workflows/microservice2ci.yml'

env:
  SERVICE_NAME: microservice2
  BUILD_TAG: ${{ github.run_number }}
  GCP_REGION: us-central1
  GCP_PROJECT_ID: heroic-gamma-465105-c8
  GAR_REPO: microservicequiz
  GCS_BUCKET: devvbackend

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - name: 1Ô∏è‚É£ Checkout Code
      uses: actions/checkout@v4

    - name: 2Ô∏è‚É£ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: 3Ô∏è‚É£ Install Dependencies
      run: npm install

    - name: 4Ô∏è‚É£ Run Unit Tests
      run: echo ' No test cases running '

    - name: 5Ô∏è‚É£ Create Zip Artifact
      run: |
        zip -r ${{ env.SERVICE_NAME }}.zip . -x "node_modules/*" ".git/*"

    - name: 6Ô∏è‚É£ Authenticate to Google Cloud
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > $HOME/key.json
        gcloud auth activate-service-account --key-file=$HOME/key.json
        gcloud config set project ${{ env.GCP_PROJECT_ID }}
        gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

    - name: 7Ô∏è‚É£ Upload Artifact to GCS
      run: |
        DATE=$(date +%F)
        gsutil cp ${{ env.SERVICE_NAME }}.zip gs://${{ env.GCS_BUCKET }}/${{ env.SERVICE_NAME }}/build-${{ env.BUILD_TAG }}.zip

    - name: 8Ô∏è‚É£ Build Docker Image
      run: docker build -t ${{ env.SERVICE_NAME }} .

    - name: 9Ô∏è‚É£ Trivy Image Scan (before push)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.SERVICE_NAME }}
        format: 'table'

    - name: üîü Tag and Push to Google Artifact Registry
      run: |
        GAR_IMAGE=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.SERVICE_NAME }}
        docker tag ${{ env.SERVICE_NAME }} $GAR_IMAGE:${{ env.BUILD_TAG }}
        docker push $GAR_IMAGE:${{ env.BUILD_TAG }}
        echo "GAR_IMAGE=$GAR_IMAGE" >> $GITHUB_ENV

    - name: 1Ô∏è‚É£1Ô∏è‚É£ Run Docker Container Locally
      run: |
        docker run -d -p 8080:80 --name ${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}

    - name: 1Ô∏è‚É£2Ô∏è‚É£ OWASP ZAP DAST Scan
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        token: ${{ secrets.GH_PAT }}
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        target: 'http://host.docker.internal:8080'
        cmd_options: '-a -r zap-report.html -J zap-report.json'

    - name: üìã Upload ZAP DAST Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: zap-dast-report
        path: |
          zap-report.html
          zap-report.json

    - name: üßπ Stop Docker Container
      if: always()
      run: |
        docker stop ${{ env.SERVICE_NAME }}
        docker rm ${{ env.SERVICE_NAME }}

    - name: 1Ô∏è‚É£3Ô∏è‚É£ Update Kubernetes deployment.yaml
      run: |
        sed -i "s|image: .*|image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.SERVICE_NAME }}:${{ env.BUILD_TAG }}|" k8s/deployment.yaml

        git config --global user.email "mspr9773@gmail.com"
        git config --global user.name "M Surya Prasad"
        git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}

        git add k8s/deployment.yaml
        git diff --cached --quiet && echo "üü° No changes to commit" || git commit -m "Update image to ${{ env.BUILD_TAG }}"
        git push origin main
